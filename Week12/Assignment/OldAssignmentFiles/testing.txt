To allow for the tests to run and not print errors every time, I created enumerated
error codes which cause every function to return as soon as the error code is
changed from PASS. This allows me to test if the program detects the correct problem.
Want to keep the testing in the initial file so it is tested each time a modification
is made.

May need to put this in another program - test parse and test interp (ASK NEILL)




All variable/constant functions were tested independently to check that they
returned the correct result, and then tested properly through varcon to check that
they returned syntax errors if the input was invalid - this couldn't be done
using the individual functions because triggering a syntax error just because
something wasn't a string constant would prevent it being evaluated as a number
constant (can only be tested through varcon)


Changed make all to make parser, tester and 2 test files, and run them for the standard tests
This is because every time a change is made, those tests should be run, but otherwise
the test files aren't used when normally running, and any extra error checking can be
done using make test

Testing limitation can be if the filenames of the files I create to test already exist
Code has a failsafe to prevent overwriting existing files, but later tests will fail
because of this and the user may not be able to find the reason

Wanted to test input more thoroughly but would have resulted in lots of ifdefs and cases
inside the code, making it less readable
Scanf designed to prevent any input greater than MAXWORDLEN

Parsing and interpreting tests could be done in the same function using ifdefs, but
this method seems cleaner because separate testcases need to be used for each
program, and extra test cases can now be easily added to each

%E = 17.8
%V = 90
$S = #WOW.txt#
PRINT %E
PRINT $S
PRINTN %V
PRINT ""



  /* Redirect stdout to a new test file */
  freopen("TESTOUTPUT.txt", "w", stdout);

/* Once testing is done, restore stdout */
freopen("/dev/tty","w",stdout);
